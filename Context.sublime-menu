[{"command": "save"}, 
{"caption": "Reminders",
 "children":
 	[
 		{"caption": "Update",
 		"command": "handy_harness",
 		"args": {"op": "updateReminders"}},
 		{"caption": "Add",
 		"command": "handy_harness",
 		"args": {"op": "addToReminders"}},
 		{"caption": "Remove",
 		"command": "handy_harness",
 		"args": {"op": "removeFromReminders"}},
 		{"caption": "Open Reminders",
 		"command": "handy_harness",
 		"args": {"op": "goToReminders"}}
 	]}, 
{"caption": "Erase Line", 
"args": {"op": "erase_line"}, 
"command": "handy_harness"}, 
{"caption": "History", "children": 
[{"caption": "write", "args": {"text": "write", "op": "history_paste"}, "command": "handy_harness"}, {"caption": "settings", "args": {"text": "settings", "op": "history_paste"}, "command": "handy_harness"}, {"caption": "import sublime, sublime_plugin, sys\nimport json\nimport random, os\nfrom time import gmtime, strftime\nfrom datetime import date, timedelta\n\nclass HandyHarnessCommand(sublime_plugin.TextCommand):\n\tconfig = sublime.load_settings(\"Handy_Harness.sublime-settings\")", "args": {"text": "import sublime, sublime_plugin, sys\nimport json\nimport random, os\nfrom time import gmtime, strftime\nfrom datetime import date, timedelta\n\nclass HandyHarnessCommand(sublime_plugin.TextCommand):\n\tconfig = sublime.load_settings(\"Handy_Harness.sublime-settings\")", "op": "history_paste"}, "command": "handy_harness"}, {"caption": "\n\t\telif args['op'] == 'remind':\n\t\t\tself.remind(edit)", "args": {"text": "\n\t\telif args['op'] == 'remind':\n\t\t\tself.remind(edit)", "op": "history_paste"}, "command": "handy_harness"}, {"caption": "\n\tdef remind(self, edit):\n\t\t\n\t\n\t\tremindFilePath = self.config.get(\"remindFile\")\n\t\tinsertionFilePath = self.config.get(\"todoInsertionFile\")\n\t\tstartDelim = self.config.get(\"startDelimiter\")\n\t\tendDelim = self.config.get(\"endDelimiter\")\n\t\tdayLimit = self.config.get(\"daysFromNow\")\n\n\t\ttry:\n\t\t\tf = open(remindFilePath, 'r')\n\t\texcept ValueError, IOError:\n\t\t\tprint \"Cannot open remind file\"\n\n\t\treminders = f.read().split('\\n')\n\t\treminders.sort()\n\n\t\ttoday = date.today()\n\t\tendDay = today + timedelta(int(dayLimit))\n\n\t\tendDate = strftime(\"%Y-%m-%d\", endDay.timetuple())\n\n\t\ti = 0\n\t\t#change while condition to ye < ye, mo < mo, da < da, and end of list not exceeded\n\t\twhile(reminders[i][:10] < endDate and i < len(reminders)):\n\t\t\ti+1\t\t\n\n\t\tprint i\n\t\tprint reminders.length()", "args": {"text": "\n\tdef remind(self, edit):\n\t\t\n\t\n\t\tremindFilePath = self.config.get(\"remindFile\")\n\t\tinsertionFilePath = self.config.get(\"todoInsertionFile\")\n\t\tstartDelim = self.config.get(\"startDelimiter\")\n\t\tendDelim = self.config.get(\"endDelimiter\")\n\t\tdayLimit = self.config.get(\"daysFromNow\")\n\n\t\ttry:\n\t\t\tf = open(remindFilePath, 'r')\n\t\texcept ValueError, IOError:\n\t\t\tprint \"Cannot open remind file\"\n\n\t\treminders = f.read().split('\\n')\n\t\treminders.sort()\n\n\t\ttoday = date.today()\n\t\tendDay = today + timedelta(int(dayLimit))\n\n\t\tendDate = strftime(\"%Y-%m-%d\", endDay.timetuple())\n\n\t\ti = 0\n\t\t#change while condition to ye < ye, mo < mo, da < da, and end of list not exceeded\n\t\twhile(reminders[i][:10] < endDate and i < len(reminders)):\n\t\t\ti+1\t\t\n\n\t\tprint i\n\t\tprint reminders.length()", "op": "history_paste"}, 
"command": "handy_harness"}]}]